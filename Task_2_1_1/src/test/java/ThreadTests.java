import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.List;

public class ThreadTests {

    Integer[] brr = {6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039, 6997901, 6997927, 6997937, 6997967, 6998009,
        6998029, 6998039};

    @Test
    public void parallelTestTrue() {
        List<Integer> arr = new ArrayList<>();
        arr.add(1);
        arr.add(2);
        arr.add(3);
        arr.add(5);
        arr.add(11);
        arr.add(13);
        arr.add(17);
        arr.add(19);
        arr.add(19);
        arr.add(19);
        arr.add(10);
        Assertions.assertTrue(PrimeSearcherThread.searcher(arr, 3));
    }

    @Test
    public void parallelTestBig4() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 4));
    }

    @Test
    public void parallelTestBig2() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 2));
    }

    @Test
    public void parallelTestBig6() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 6));
    }

    @Test
    public void parallelTestBig8() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 8));
    }

    @Test
    public void parallelTestBig16() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 16));
    }

    @Test
    public void parallelTestBig32() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 32));
    }

    @Test
    public void parallelTestBig100() {
        List<Integer> arr = new ArrayList<>(List.of(brr));
        Assertions.assertFalse(PrimeSearcherThread.searcher(arr, 100));
    }
}